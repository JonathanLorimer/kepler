-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/f-o-a-m/kepler/blob/master/hs-abci-docs/simple-storage/README.md</a>
@package simple-storage
@version 0.1.0.0

module Proto.SimpleStorage.Messages

-- | Fields :
--   
--   <ul>
--   <li><a>username</a> <tt>:: Lens' UpdateCount Data.Text.Text</tt></li>
--   <li><a>count</a> <tt>:: Lens' UpdateCount Data.Int.Int32</tt></li>
--   </ul>
data UpdateCount
instance GHC.Classes.Ord Proto.SimpleStorage.Messages.UpdateCount
instance GHC.Classes.Eq Proto.SimpleStorage.Messages.UpdateCount
instance GHC.Show.Show Proto.SimpleStorage.Messages.UpdateCount
instance Data.ProtoLens.Field.HasField Proto.SimpleStorage.Messages.UpdateCount "username" Data.Text.Internal.Text
instance Data.ProtoLens.Field.HasField Proto.SimpleStorage.Messages.UpdateCount "count" GHC.Int.Int32
instance Data.ProtoLens.Message.Message Proto.SimpleStorage.Messages.UpdateCount
instance Control.DeepSeq.NFData Proto.SimpleStorage.Messages.UpdateCount

module Proto.SimpleStorage.Messages_Fields
count :: forall f s a. (Functor f, HasField s "count" a) => LensLike' f s a
username :: forall f s a. (Functor f, HasField s "username" a) => LensLike' f s a

module SimpleStorage.Config
data AppConfig
AppConfig :: Context -> AppConfig
[_baseAppContext] :: AppConfig -> Context
baseAppContext :: Iso' AppConfig Context
makeAppConfig :: IO AppConfig

module SimpleStorage.Modules.SimpleStorage.Message
data UpdateCountTx
UpdateCountTx :: Text -> Int32 -> UpdateCountTx
[updateCountTxUsername] :: UpdateCountTx -> Text
[updateCountTxCount] :: UpdateCountTx -> Int32
instance GHC.Generics.Generic SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance GHC.Classes.Eq SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance GHC.Show.Show SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance Tendermint.SDK.Types.Message.HasMessageType SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance Tendermint.SDK.Types.Message.ValidateMessage SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance Control.Lens.Wrapped.Wrapped SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance Tendermint.SDK.Codec.HasCodec SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx

module SimpleStorage.Modules.SimpleStorage.Types
data SimpleStorageNamespace
newtype Count
Count :: Int32 -> Count
data CountKey
CountKey :: CountKey
data CountSet
CountSet :: Count -> CountSet
[newCount] :: CountSet -> Count
countSetOptions :: Options
type SimpleStorageName = "simple_storage"
instance GHC.Generics.Generic SimpleStorage.Modules.SimpleStorage.Types.CountSet
instance Data.Serialize.Serialize SimpleStorage.Modules.SimpleStorage.Types.Count
instance Data.Aeson.Types.FromJSON.FromJSON SimpleStorage.Modules.SimpleStorage.Types.Count
instance Data.Aeson.Types.ToJSON.ToJSON SimpleStorage.Modules.SimpleStorage.Types.Count
instance GHC.Show.Show SimpleStorage.Modules.SimpleStorage.Types.Count
instance GHC.Classes.Eq SimpleStorage.Modules.SimpleStorage.Types.Count
instance Data.Aeson.Types.ToJSON.ToJSON SimpleStorage.Modules.SimpleStorage.Types.CountSet
instance Data.Aeson.Types.FromJSON.FromJSON SimpleStorage.Modules.SimpleStorage.Types.CountSet
instance Tendermint.SDK.BaseApp.Events.ToEvent SimpleStorage.Modules.SimpleStorage.Types.CountSet
instance Tendermint.SDK.BaseApp.Logger.Select SimpleStorage.Modules.SimpleStorage.Types.CountSet
instance Tendermint.SDK.BaseApp.Store.RawStore.RawKey SimpleStorage.Modules.SimpleStorage.Types.CountKey
instance Tendermint.SDK.BaseApp.Store.RawStore.IsKey SimpleStorage.Modules.SimpleStorage.Types.CountKey SimpleStorage.Modules.SimpleStorage.Types.SimpleStorageNamespace
instance Tendermint.SDK.BaseApp.Query.Types.FromQueryData SimpleStorage.Modules.SimpleStorage.Types.CountKey
instance Tendermint.SDK.Codec.HasCodec SimpleStorage.Modules.SimpleStorage.Types.Count
instance Tendermint.SDK.BaseApp.Query.Types.Queryable SimpleStorage.Modules.SimpleStorage.Types.Count

module SimpleStorage.Modules.SimpleStorage.Keeper
data SimpleStorageKeeper m a
type SimpleStorageEffs = '[SimpleStorageKeeper]
updateCount :: Members '[SimpleStorageKeeper, Output Event, Logger] r => Count -> Sem r ()
getCount :: forall r_aSKE. MemberWithError SimpleStorageKeeper r_aSKE => Sem r_aSKE (Maybe Count)
storeKey :: StoreKey SimpleStorageNamespace
eval :: forall r. Members TxEffs r => forall a. Sem (SimpleStorageKeeper : r) a -> Sem r a

module SimpleStorage.Modules.SimpleStorage.Router
type MessageApi = TypedMessage UpdateCountTx :~> Return ()
messageHandlers :: Member SimpleStorageKeeper r => Members TxEffs r => Members BaseEffs r => RouteTx MessageApi r

module SimpleStorage.Modules.SimpleStorage.Query
type CountStoreContents = '[(CountKey, Count)]
type QueryApi = QueryApi CountStoreContents
querier :: Members QueryEffs r => RouteQ QueryApi r

module SimpleStorage.Modules.SimpleStorage
type SimpleStorage = Module SimpleStorageName MessageApi MessageApi QueryApi SimpleStorageEffs '[]
simpleStorageModule :: Members (ModuleEffs SimpleStorage) r => SimpleStorage r
data SimpleStorageKeeper m a
type SimpleStorageEffs = '[SimpleStorageKeeper]
getCount :: forall r_aSKE. MemberWithError SimpleStorageKeeper r_aSKE => Sem r_aSKE (Maybe Count)
updateCount :: Members '[SimpleStorageKeeper, Output Event, Logger] r => Count -> Sem r ()
eval :: forall r. Members TxEffs r => forall a. Sem (SimpleStorageKeeper : r) a -> Sem r a

module SimpleStorage.Application
type SimpleStorageModules = '[SimpleStorage, Auth]
handlersContext :: HandlersContext Secp256k1 SimpleStorageModules CoreEffs

module SimpleStorage.Server
makeAndServeApplication :: AppConfig -> IO ()
