-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/f-o-a-m/kepler/blob/master/hs-abci-docs/simple-storage/README.md</a>
@package simple-storage
@version 0.1.0.0

module Proto.SimpleStorage.Messages

-- | Fields :
--   
--   <ul>
--   <li><a>username</a> <tt>:: Lens' UpdateCount Data.Text.Text</tt></li>
--   <li><a>count</a> <tt>:: Lens' UpdateCount Data.Int.Int32</tt></li>
--   </ul>
data UpdateCount
instance GHC.Classes.Ord Proto.SimpleStorage.Messages.UpdateCount
instance GHC.Classes.Eq Proto.SimpleStorage.Messages.UpdateCount
instance GHC.Show.Show Proto.SimpleStorage.Messages.UpdateCount
instance Data.ProtoLens.Field.HasField Proto.SimpleStorage.Messages.UpdateCount "username" Data.Text.Internal.Text
instance Data.ProtoLens.Field.HasField Proto.SimpleStorage.Messages.UpdateCount "count" GHC.Int.Int32
instance Data.ProtoLens.Message.Message Proto.SimpleStorage.Messages.UpdateCount
instance Control.DeepSeq.NFData Proto.SimpleStorage.Messages.UpdateCount

module Proto.SimpleStorage.Messages_Fields
count :: forall f s a. (Functor f, HasField s "count" a) => LensLike' f s a
username :: forall f s a. (Functor f, HasField s "username" a) => LensLike' f s a

module SimpleStorage.Config
data AppConfig
AppConfig :: Context -> AppConfig
[_baseAppContext] :: AppConfig -> Context
baseAppContext :: Iso' AppConfig Context
makeAppConfig :: IO AppConfig

module SimpleStorage.Modules.SimpleStorage.Keys
countKey :: ByteString

module SimpleStorage.Modules.SimpleStorage.Message
data UpdateCountTx
UpdateCountTx :: Text -> Int32 -> UpdateCountTx
[updateCountTxUsername] :: UpdateCountTx -> Text
[updateCountTxCount] :: UpdateCountTx -> Int32
instance GHC.Generics.Generic SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance GHC.Classes.Eq SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance GHC.Show.Show SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance Tendermint.SDK.Types.Message.HasMessageType SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance Tendermint.SDK.Types.Message.ValidateMessage SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance Control.Lens.Wrapped.Wrapped SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance Tendermint.SDK.Codec.HasCodec SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx

module SimpleStorage.Modules.SimpleStorage.Types
type SimpleStorageName = "simple_storage"
newtype Count
Count :: Int32 -> Count
data CountSet
CountSet :: Count -> CountSet
[newCount] :: CountSet -> Count
countSetOptions :: Options
instance GHC.Generics.Generic SimpleStorage.Modules.SimpleStorage.Types.CountSet
instance Data.Serialize.Serialize SimpleStorage.Modules.SimpleStorage.Types.Count
instance Data.Aeson.Types.FromJSON.FromJSON SimpleStorage.Modules.SimpleStorage.Types.Count
instance Data.Aeson.Types.ToJSON.ToJSON SimpleStorage.Modules.SimpleStorage.Types.Count
instance GHC.Show.Show SimpleStorage.Modules.SimpleStorage.Types.Count
instance GHC.Classes.Eq SimpleStorage.Modules.SimpleStorage.Types.Count
instance Data.Aeson.Types.ToJSON.ToJSON SimpleStorage.Modules.SimpleStorage.Types.CountSet
instance Data.Aeson.Types.FromJSON.FromJSON SimpleStorage.Modules.SimpleStorage.Types.CountSet
instance Tendermint.SDK.BaseApp.Events.ToEvent SimpleStorage.Modules.SimpleStorage.Types.CountSet
instance Tendermint.SDK.BaseApp.Logger.Select SimpleStorage.Modules.SimpleStorage.Types.CountSet
instance Tendermint.SDK.Codec.HasCodec SimpleStorage.Modules.SimpleStorage.Types.Count

module SimpleStorage.Modules.SimpleStorage.Keeper
type SimpleStorageEffs = '[SimpleStorageKeeper]
data SimpleStorageKeeper m a
[UpdateCount] :: Count -> SimpleStorageKeeper m ()
[GetCount] :: SimpleStorageKeeper m (Maybe Count)
updateCount :: forall r_aVjD. MemberWithError SimpleStorageKeeper r_aVjD => Count -> Sem r_aVjD ()
getCount :: forall r_aVjF. MemberWithError SimpleStorageKeeper r_aVjF => Sem r_aVjF (Maybe Count)
eval :: forall r. Members TxEffs r => Members BaseEffs r => forall a. Sem (SimpleStorageKeeper : r) a -> Sem r a
countVar :: Var Count
instance Tendermint.SDK.BaseApp.Store.RawStore.RawKey SimpleStorage.Modules.SimpleStorage.Keeper.CountVarKey
instance Tendermint.SDK.BaseApp.Store.RawStore.IsKey SimpleStorage.Modules.SimpleStorage.Keeper.CountVarKey SimpleStorage.Modules.SimpleStorage.Keeper.SimpleStorageNamespace
instance Tendermint.SDK.BaseApp.Query.Types.QueryData SimpleStorage.Modules.SimpleStorage.Keeper.CountVarKey

module SimpleStorage.Modules.SimpleStorage.Router
type MessageApi = TypedMessage UpdateCountTx :~> Return ()
messageHandlers :: Member SimpleStorageKeeper r => RouteTx MessageApi r

module SimpleStorage.Modules.SimpleStorage.Query
type QueryApi = "count" :> StoreLeaf (Var Count)
querier :: Members QueryEffs r => RouteQ QueryApi r

module SimpleStorage.Modules.SimpleStorage
type SimpleStorage = Module SimpleStorageName MessageApi MessageApi QueryApi SimpleStorageEffs '[]
simpleStorageModule :: Members (ModuleEffs SimpleStorage) r => SimpleStorage r
data SimpleStorageKeeper m a
[UpdateCount] :: Count -> SimpleStorageKeeper m ()
[GetCount] :: SimpleStorageKeeper m (Maybe Count)
type SimpleStorageEffs = '[SimpleStorageKeeper]
updateCount :: forall r_aVjD. MemberWithError SimpleStorageKeeper r_aVjD => Count -> Sem r_aVjD ()
getCount :: forall r_aVjF. MemberWithError SimpleStorageKeeper r_aVjF => Sem r_aVjF (Maybe Count)
eval :: forall r. Members TxEffs r => Members BaseEffs r => forall a. Sem (SimpleStorageKeeper : r) a -> Sem r a

module SimpleStorage.Application
type SimpleStorageModules = '[SimpleStorage, Auth]
handlersContext :: HandlersContext Secp256k1 SimpleStorageModules CoreEffs

module SimpleStorage.Server
makeAndServeApplication :: AppConfig -> IO ()
